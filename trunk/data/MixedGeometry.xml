<fieldml>
  <!-- 
  
  Mixed-geometry mesh:
  
  9---7---1---2---6
  |   |   |   |\ 3|
  | 5 | 4 | 1 |2\ |
  |   |   |   |  \|
  10--8---3---4---5
  
  
  Quad mesh:
  
  1---5---2
  |   |   |
  | 1 | 2 |
  |   |   |
  6---7---8
  |   |   |
  | 3 | 4 |
  |   |   |
  4---9---3
  
  
  Merged mesh:
  
  +--+--+--+--+
  |5 |4 |1 |\3|
  |  |  |  |2\|
  +--+--+--+--+
  |6 |7 |
  +--+--+
  |8 |9 |
  +--+--+
  
   -->

  <!--
     For now, all values in a shape map must have the same dimensionality.
   -->
  <element_shapes elements="5" id="test_mesh.shapes" dimensions="2">
    <evaluate_map> <!-- Because the domain is single-component, we don't need to specify the component here -->
      <elements>
        1  4  5
        <constant_value>
          library::unit_square
        </constant_value>
      </elements>
      <elements>
        2  3
        <constant_value>
          library::unit_triangle
        </constant_value>
      </elements>
    </evaluate_map>
  </element_shapes>
  
  <element_points elements="5" id="test_mesh.points" value_domain="library::2d_points">
    <evaluate_map>
      <elements>
        1  4  5
        <constant_value>
          library::points_square_4_clockwise
        </constant_value>
      </elements>
      <elements>
        2  3
        <constant_value>
          library::points_triangle_3_clockwise
        </constant_value>
      </elements>
    </evaluate_map>
  </element_points>

  <element_shapes elements="4" id="quad_mesh.shapes" dimensions="2">
    <evaluate_map>
      <elements>
        1  2  3  4
        <constant_value>
          library::unit_square
        </constant_value>
      </elements>
    </evaluate_map>
  </element_shapes>

  <element_points elements="4" id="quad_mesh.points" dimensions="2">
    <evaluate_map>
      <elements>
        1  2  3  4
        <constant_value>
          library::points_square_4_clockwise
        </constant_value>
      </elements>
    </evaluate_map>
  </element_points>
  
  <!--
     The shapes and nodes lists must have the same ensemble cardinality.
   -->
  <nodal_mesh id="mesh1" shapes="test_mesh.shapes" points="test_mesh.points" nodes="mesh1.node_list" >
    <visible_nodes>
      1  2  3  4  5  6  7  8  9  10
    </visible_nodes>
  </nodal_mesh>
  
  <nodal_mesh id="quad_mesh" shapes="quad_mesh.shapes" points="quad_mesh.points" nodes="quad_mesh.node_list" >
    <visible_nodes>
      1  2  3  4  5  6  8  9
    </visible_nodes>
  </nodal_mesh>
  
  <!--
    Construct a 2x2 quad mesh with explicit connectivity.
    
    The reading application can induce a corresponding nodal mesh if all the
    connectivity points fall on 'corners'. 
    
    Un-named points are not visible to the outside world.
   -->
  <complex_mesh id="explicit_quad_mesh" shapes="quad_mesh.shapes" points="quad_mesh.points" >
    <connectivity>
      <point name="1" element1="3" point1="1" />
      <point name="2" element1="3" point1="2" element2="4" point2="1" />
      <point name="3" element1="4" point1="2" />
      <point name="4" element1="1" point1="1" element2="3" point2="4" />
      <point element1="1" point1="2" element2="2" point2="1" element3="3" point3="3" element4="4" point="4"/>
      <point name="5" element1="2" point1="2" element2="4" point2="3" />
      <point name="6" element1="1" point1="4" />
      <point name="7" element1="1" point1="3" element2="2" point2="4" />
      <point name="8" element1="2" point1="3" />
    </connectivity>
  </complex_mesh>
  
  <!--
    Construct a mesh by connecting other meshes.
    Element shapes are implicit.
    Element indexes are induced by the child meshes, and cannot be explicily specified.
    
    Provided that both child meshes are nodal meshes (or look like nodal meshes), the
    merged mesh itself can also be treated as nodal.
   -->
  <merged_mesh id="merged_mesh1">
    <child_meshes>
      <mesh name="submesh_1" source_mesh="mesh1" />
      <mesh name="submesh_2" source_mesh="quad_mesh" />
    </child_meshes>

    <connectivity>
      <point name="1" element1="submesh_1" point1="9" />
      <point name="2" element1="submesh_1" point1="7" />
      <point name="3" element1="submesh_1" point1="1" />
      <point name="4" element1="submesh_1" point1="2" />
      <point name="5" element1="submesh_1" point1="6" />
      <point name="6" element1="submesh_1" point1="5" />
      <point name="7" element1="submesh_1" point1="4" />
      <point name="8" element1="submesh_1" point1="3" element2="submesh_2" point2="2" />
      <point element1="submesh_1" point1="8" element2="submesh_2" point2="5" />
      <point name="9" element1="submesh_2" point1="8" />
      <point name="10" element1="submesh_2" point1="3" />
      <point name="11" element1="submesh_2" point1="9" />
      <point name="12" element1="submesh_2" point1="4" />
      <point name="13" element1="submesh_2" point1="6" />
      <point name="14" element1="submesh_1" point1="10" element2="submesh_2" point2="1" />
    </connectivity>
  </merged_mesh>
  
  <evaluator name="mesh1.x_evaluator" elements="5" xi_dimensions="2">
    <evaluate field="library::bilinear_lagrange"> 1
      <mapped_parameter index="1" weight="1.0"/>
      <mapped_parameter index="2" weight="1.0"/>
      <mapped_parameter index="4" weight="1.0"/>
      <mapped_parameter index="3" weight="1.0"/>
    </evaluate>
    <evaluate field="library::bilinear_lagrange"> 4
      <mapped_parameter index="7" weight="1.0"/>
      <mapped_parameter index="1" weight="1.0"/>
      <mapped_parameter index="3" weight="1.0"/>
      <mapped_parameter index="8" weight="1.0"/>
    </evaluate>
    <evaluate field="library::bilinear_lagrange"> 5
      <mapped_parameter index="6" weight="1.0"/>
      <mapped_parameter index="7" weight="1.0"/>
      <mapped_parameter index="9" weight="1.0"/>
      <mapped_parameter index="10" weight="1.0"/>
    </evaluate>
    <evaluate field="library::bilinear_simplex"> 2
      <mapped_parameter index="2" weight="1.0"/>
      <mapped_parameter index="4" weight="1.0"/>
      <mapped_parameter index="5" weight="1.0"/>
    </evaluate>
    <evaluate field="library::identity"> 3
      <mapped_parameter>
        <constant_parameter value="0.0"/>
      </mapped_parameter>
    </evaluate>
  </evaluator>
  
  <evaluator name="mesh1.y_evaluator" elements="5" xi_dimensions="2" inherits="mesh1.x_evaluator" >
    <evaluate field="library::identity"> 3
      <mapped_parameter>
        <constant_parameter value="1.0"/>
      </mapped_parameter>
    </evaluate>
  </evaluator>

  <piecewise_field id="mesh.coordinates" mesh="mesh1" value_domain="library::cartesian_2d">
    <!--
      If the 'dofs' attribute is missing, the field cannot be evaluated expect as an import
      into another field. 
     -->
    <evaluate_piecewise component="x" evaluator="mesh1.x_evaluator" dofs="global.mesh.x" />
    <evaluate_piecewise component="y" evaluator="mesh1.y_evaluator" dofs="global.mesh.x" />
  </piecewise_field>
  
  
  <evaluator name="quad_mesh.evaluator" elements="4" xi_dimensions="2">
    <evaluate field="library::bilinear_lagrange"> 1
      <mapped_parameter index="1" weight="1.0"/>
      <mapped_parameter index="5" weight="1.0"/>
      <mapped_parameter index="7" weight="1.0"/>
      <mapped_parameter index="6" weight="1.0"/>
    </evaluate>
    <evaluate field="library::bilinear_lagrange"> 2
      <mapped_parameter index="5" weight="1.0"/>
      <mapped_parameter index="2" weight="1.0"/>
      <mapped_parameter index="8" weight="1.0"/>
      <mapped_parameter index="7" weight="1.0"/>
    </evaluate>
    <evaluate field="library::bilinear_lagrange"> 3
      <mapped_parameter index="7" weight="1.0"/>
      <mapped_parameter index="8" weight="1.0"/>
      <mapped_parameter index="3" weight="1.0"/>
      <mapped_parameter index="9" weight="1.0"/>
    </evaluate>
    <evaluate field="library::bilinear_lagrange"> 4
      <mapped_parameter index="6" weight="1.0"/>
      <mapped_parameter index="7" weight="1.0"/>
      <mapped_parameter index="9" weight="1.0"/>
      <mapped_parameter index="4" weight="1.0"/>
    </evaluate>
  </evaluator>
  
  
  <piecewise_field id="mesh.quad_field" mesh="explicit_quad_mesh" value_domain="library::real">
    <evaluate_piecewise component="u" evaluator="quad_mesh.evaluator" />
  </piecewise_field>
  
  <!--
    Charts are restricted to having a single element.  
   -->
  <chart_field id="library::bilinear_lagrange" mesh="library::square_mesh" value_domain="library::real">
    <evaluate component="u" parameters="4">
      ( 1 - x1 ) * ( 1 - x2 ) * parameter1 +
      x1 * ( 1 - x2 ) * parameter2 +
      ( 1 - x1 ) * x2 * parameter3 +
      x1 * x2 * parameter4
    </evaluate>
  </chart_field>
  
  <element_nodes elements="5" id="mesh1.node_list" value_domain="library::index_vector">
    <evaluate_map>
      <elements> 1
        <constant_value>
          1  2  4  3
        </constant_value>
      </elements>
      <elements> 2
        <constant_value>
          2  4  5
        </constant_value>
      </elements>
      <elements> 3
        <constant_value>
          2  5  6
        </constant_value>
      </elements>
      <elements> 4
        <constant_value>
          7  1  3  8
        </constant_value>
      </elements>
      <elements> 5
        <constant_value>
          9  7  8  10
        </constant_value>
      </elements>
    </evaluate_map>
  </element_nodes>

  <element_nodes elements="4" id="quad_mesh.node_list" value_domain="library::index_vector">
    <evaluate_map>
      <elements> 1
        <constant_value>
          1  5  7  6
        </constant_value>
      </elements>
      <elements> 2
        <constant_value>
          5  2  8  7
        </constant_value>
      </elements>
      <elements> 3
        <constant_value>
          7  8  3  9
        </constant_value>
      </elements>
      <elements> 4
        <constant_value>
          6  7  9  4
        </constant_value>
      </elements>
    </evaluate_map>
  </element_nodes>

  <global_dof_list id="global.mesh.x">
    0.0  1.0  0.0  1.0  2.0  2.0 -1.0 -1.0
  </global_dof_list>

  <global_dof_list id="global.mesh.y">
    1.0  1.0  0.0  0.0  0.0  1.0  1.0  0.0
  </global_dof_list>
</fieldml>
